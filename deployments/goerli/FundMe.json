{
  "address": "0x51566Df1A2EFFd5f02C72136228927c475Bb3eBc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAdress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddresstoAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x616ed32e1b45c7c4e2bf583dc5424036567226d84c3fe46a29e0b4863cd40f49",
  "receipt": {
    "to": null,
    "from": "0x29841C74f36733CB2bc45907d2BfBCaa24842E6C",
    "contractAddress": "0x51566Df1A2EFFd5f02C72136228927c475Bb3eBc",
    "transactionIndex": 12,
    "gasUsed": "981601",
    "logsBloom": "0x
    "blockHash": "0x14e35e73754d4d997b4d362e9d42b16d952dfc11a4fefeae5b0f46fb7c1fc799",
    "transactionHash": "0x616ed32e1b45c7c4e2bf583dc5424036567226d84c3fe46a29e0b4863cd40f49",
    "logs": [],
    "blockNumber": 7677073,
    "cumulativeGasUsed": "1877328",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "57f115f60fa6cd164bcebc7a10cdbf75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddresstoAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nada Labidi\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for a crowd Funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"this function funds the contract\"}},\"notice\":\"this contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.9;\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n//Error Codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts ==> natspec for documentation\\n\\n/** @title A contract for a crowd Funding\\n *  @author Nada Labidi\\n *  @notice this contract is to demo a sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable  i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private s_priceFeed;\\n       \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAdress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAdress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**@notice this function funds the contract\\n    *  @dev This implements price feeds as our library\\n    */\\n    function fund() public payable {\\n        require\\n        (msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\n        \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n   \\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory \\n        for(uint256 funderIndex = 0 ; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n\\n    }\\n\\n\\n    // view/pure\\n\\n    function getOwner()public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddresstoAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n    \\n\\n}\\n\\n\",\"keccak256\":\"0x2bba3b37781bee7e4188edc32b9ea73a7edd269ffc563d0d34d3264365a1fd42\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n      \\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xe4faa0f97c5a88cc32d67e4b0abf16c55341c1bb42ce8b8d4e4e2a1d3aee5be5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011e2380380620011e283398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161106262000180600039600081816101f00152818161043f015281816105c901526107bf01526110626000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80631cb4ed96146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a74565b6101a6565b6040516100b49190610aba565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e961042e565b6040516100f69190610aba565b60405180910390f35b34801561010b57600080fd5b5061011461043b565b6040516101219190610ae4565b60405180910390f35b34801561013657600080fd5b5061013f610463565b60405161014c9190610b5e565b60405180910390f35b61015d61048d565b005b6101676105c7565b005b34801561017557600080fd5b50610190600480360381019061018b9190610ba5565b610855565b60405161019d9190610ae4565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561031e5760006001828154811061029957610298610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031690610c30565b915050610276565b50600067ffffffffffffffff81111561033a57610339610c78565b5b6040519080825280602002602001820160405280156103685781602001602082028036833780820191505090505b506001908051906020019061037e92919061096a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a590610cd8565b60006040518083038185875af1925050503d80600081146103e2576040519150601f19603f3d011682016040523d82523d6000602084013e6103e7565b606091505b505090508061042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290610d4a565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089d90919063ffffffff16565b101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610db6565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461055b9190610dd6565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610686575b5050505050905060005b815181101561075a5760008282815181106106f8576106f7610bd2565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075290610c30565b9150506106da565b50600067ffffffffffffffff81111561077657610775610c78565b5b6040519080825280602002602001820160405280156107a45781602001602082028036833780820191505090505b50600190805190602001906107ba92919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080190610cd8565b60006040518083038185875af1925050503d806000811461083e576040519150601f19603f3d011682016040523d82523d6000602084013e610843565b606091505b505090508061085157600080fd5b5050565b60006001828154811061086b5761086a610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a9836108d9565b90506000670de0b6b3a764000085836108c29190610e0a565b6108cc9190610e7b565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190610f39565b5050509150506402540be400816109629190610fb4565b915050919050565b8280548282559060005260206000209081019282156109e3579160200282015b828111156109e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098a565b5b5090506109f091906109f4565b5090565b5b80821115610a0d5760008160009055506001016109f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b8114610a5c57600080fd5b50565b600081359050610a6e81610a48565b92915050565b600060208284031215610a8a57610a89610a11565b5b6000610a9884828501610a5f565b91505092915050565b6000819050919050565b610ab481610aa1565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b610ade81610a36565b82525050565b6000602082019050610af96000830184610ad5565b92915050565b6000819050919050565b6000610b24610b1f610b1a84610a16565b610aff565b610a16565b9050919050565b6000610b3682610b09565b9050919050565b6000610b4882610b2b565b9050919050565b610b5881610b3d565b82525050565b6000602082019050610b736000830184610b4f565b92915050565b610b8281610aa1565b8114610b8d57600080fd5b50565b600081359050610b9f81610b79565b92915050565b600060208284031215610bbb57610bba610a11565b5b6000610bc984828501610b90565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3b82610aa1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c6d57610c6c610c01565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cc2600083610ca7565b9150610ccd82610cb2565b600082019050919050565b6000610ce382610cb5565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d34600b83610ced565b9150610d3f82610cfe565b602082019050919050565b60006020820190508181036000830152610d6381610d27565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610da0601b83610ced565b9150610dab82610d6a565b602082019050919050565b60006020820190508181036000830152610dcf81610d93565b9050919050565b6000610de182610aa1565b9150610dec83610aa1565b9250828201905080821115610e0457610e03610c01565b5b92915050565b6000610e1582610aa1565b9150610e2083610aa1565b9250828202610e2e81610aa1565b91508282048414831517610e4557610e44610c01565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8682610aa1565b9150610e9183610aa1565b925082610ea157610ea0610e4c565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ecb81610eac565b8114610ed657600080fd5b50565b600081519050610ee881610ec2565b92915050565b6000819050919050565b610f0181610eee565b8114610f0c57600080fd5b50565b600081519050610f1e81610ef8565b92915050565b600081519050610f3381610b79565b92915050565b600080600080600060a08688031215610f5557610f54610a11565b5b6000610f6388828901610ed9565b9550506020610f7488828901610f0f565b9450506040610f8588828901610f24565b9350506060610f9688828901610f24565b9250506080610fa788828901610ed9565b9150509295509295909350565b6000610fbf82610eee565b9150610fca83610eee565b9250828202610fd881610eee565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110105761100f610c01565b5b828205841483151761102557611024610c01565b5b509291505056fea26469706673582212202814bc03651577e820abe4b6f495d4641966e03b5a806e00749bf75461ecfec764736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80631cb4ed96146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a74565b6101a6565b6040516100b49190610aba565b60405180910390f35b3480156100c957600080fd5b506100d26101ee565b005b3480156100e057600080fd5b506100e961042e565b6040516100f69190610aba565b60405180910390f35b34801561010b57600080fd5b5061011461043b565b6040516101219190610ae4565b60405180910390f35b34801561013657600080fd5b5061013f610463565b60405161014c9190610b5e565b60405180910390f35b61015d61048d565b005b6101676105c7565b005b34801561017557600080fd5b50610190600480360381019061018b9190610ba5565b610855565b60405161019d9190610ae4565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610273576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561031e5760006001828154811061029957610298610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031690610c30565b915050610276565b50600067ffffffffffffffff81111561033a57610339610c78565b5b6040519080825280602002602001820160405280156103685781602001602082028036833780820191505090505b506001908051906020019061037e92919061096a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a590610cd8565b60006040518083038185875af1925050503d80600081146103e2576040519150601f19603f3d011682016040523d82523d6000602084013e6103e7565b606091505b505090508061042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290610d4a565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089d90919063ffffffff16565b101561050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610db6565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461055b9190610dd6565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610686575b5050505050905060005b815181101561075a5760008282815181106106f8576106f7610bd2565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075290610c30565b9150506106da565b50600067ffffffffffffffff81111561077657610775610c78565b5b6040519080825280602002602001820160405280156107a45781602001602082028036833780820191505090505b50600190805190602001906107ba92919061096a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080190610cd8565b60006040518083038185875af1925050503d806000811461083e576040519150601f19603f3d011682016040523d82523d6000602084013e610843565b606091505b505090508061085157600080fd5b5050565b60006001828154811061086b5761086a610bd2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a9836108d9565b90506000670de0b6b3a764000085836108c29190610e0a565b6108cc9190610e7b565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190610f39565b5050509150506402540be400816109629190610fb4565b915050919050565b8280548282559060005260206000209081019282156109e3579160200282015b828111156109e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061098a565b5b5090506109f091906109f4565b5090565b5b80821115610a0d5760008160009055506001016109f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b8114610a5c57600080fd5b50565b600081359050610a6e81610a48565b92915050565b600060208284031215610a8a57610a89610a11565b5b6000610a9884828501610a5f565b91505092915050565b6000819050919050565b610ab481610aa1565b82525050565b6000602082019050610acf6000830184610aab565b92915050565b610ade81610a36565b82525050565b6000602082019050610af96000830184610ad5565b92915050565b6000819050919050565b6000610b24610b1f610b1a84610a16565b610aff565b610a16565b9050919050565b6000610b3682610b09565b9050919050565b6000610b4882610b2b565b9050919050565b610b5881610b3d565b82525050565b6000602082019050610b736000830184610b4f565b92915050565b610b8281610aa1565b8114610b8d57600080fd5b50565b600081359050610b9f81610b79565b92915050565b600060208284031215610bbb57610bba610a11565b5b6000610bc984828501610b90565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3b82610aa1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c6d57610c6c610c01565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cc2600083610ca7565b9150610ccd82610cb2565b600082019050919050565b6000610ce382610cb5565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d34600b83610ced565b9150610d3f82610cfe565b602082019050919050565b60006020820190508181036000830152610d6381610d27565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610da0601b83610ced565b9150610dab82610d6a565b602082019050919050565b60006020820190508181036000830152610dcf81610d93565b9050919050565b6000610de182610aa1565b9150610dec83610aa1565b9250828201905080821115610e0457610e03610c01565b5b92915050565b6000610e1582610aa1565b9150610e2083610aa1565b9250828202610e2e81610aa1565b91508282048414831517610e4557610e44610c01565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8682610aa1565b9150610e9183610aa1565b925082610ea157610ea0610e4c565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ecb81610eac565b8114610ed657600080fd5b50565b600081519050610ee881610ec2565b92915050565b6000819050919050565b610f0181610eee565b8114610f0c57600080fd5b50565b600081519050610f1e81610ef8565b92915050565b600081519050610f3381610b79565b92915050565b600080600080600060a08688031215610f5557610f54610a11565b5b6000610f6388828901610ed9565b9550506020610f7488828901610f0f565b9450506040610f8588828901610f24565b9350506060610f9688828901610f24565b9250506080610fa788828901610ed9565b9150509295509295909350565b6000610fbf82610eee565b9150610fca83610eee565b9250828202610fd881610eee565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156110105761100f610c01565b5b828205841483151761102557611024610c01565b5b509291505056fea26469706673582212202814bc03651577e820abe4b6f495d4641966e03b5a806e00749bf75461ecfec764736f6c63430008110033",
  "devdoc": {
    "author": "Nada Labidi",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for a crowd Funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "this function funds the contract"
      }
    },
    "notice": "this contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}